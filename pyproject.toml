[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "network-scanner-vuln-detector"
version = "1.0.0"
authors = [
    {name = "Security Engineer", email = "security@example.com"},
]
description = "网络扫描和漏洞检测工具"
readme = "README.md"
requires-python = ">=3.6"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Developers",
    "Topic :: Security",
    "Topic :: System :: Networking",
    "Topic :: System :: Systems Administration",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: Console",
]
keywords = ["network", "scanner", "vulnerability", "security", "penetration", "testing", "nmap"]
dependencies = [
    "requests>=2.25.0",
]
dynamic = ["version"]

[project.optional-dependencies]
full = [
    "requests>=2.25.0",
    "python-nmap>=0.6.1",
    "scapy>=2.4.0",
    "pandas>=1.3.0",
    "numpy>=1.21.0",
    "cryptography>=3.4.0",
    "paramiko>=2.7.0",
    "jinja2>=3.0.0",
    "markdown>=3.3.0",
]
dev = [
    "pytest>=6.0.0",
    "pytest-cov>=2.10.0",
    "pytest-mock>=3.6.0",
    "black>=21.0.0",
    "flake8>=3.8.0",
    "isort>=5.9.0",
    "mypy>=0.910",
    "bandit>=1.7.0",
    "pylint>=2.9.0",
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=0.5.0",
    "pre-commit>=2.13.0",
]
nmap = ["python-nmap>=0.6.1"]
advanced = [
    "scapy>=2.4.0",
    "cryptography>=3.4.0",
    "paramiko>=2.7.0",
]
analysis = [
    "pandas>=1.3.0",
    "numpy>=1.21.0",
]
reporting = [
    "jinja2>=3.0.0",
    "markdown>=3.3.0",
]

[project.scripts]
network-scanner = "scanner.main:main"
vuln-scanner = "scanner.main:main"

[project.urls]
"Homepage" = "https://github.com/security-engineer/network-scanner"
"Bug Reports" = "https://github.com/security-engineer/network-scanner/issues"
"Source" = "https://github.com/security-engineer/network-scanner"
"Documentation" = "https://network-scanner.readthedocs.io/"

[tool.setuptools]
packages = ["scanner"]

[tool.setuptools.package-data]
scanner = ["data/*", "data/exploits/**/*"]

[tool.black]
line-length = 88
target-version = ['py36', 'py37', 'py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | scanner/data
  )/
)
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["scanner/data/**"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    ".tox",
    ".eggs",
    "*.egg",
    "build",
    "dist",
    "scanner/data",
]

[tool.mypy]
python_version = "3.6"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["scanner.data.*"]
ignore_errors = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m "not slow"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["scanner"]
omit = [
    "*/tests/*",
    "*/test_*",
    "scanner/data/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "scanner/data"]
skips = ["B101", "B601"]